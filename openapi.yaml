openapi: 3.0.1
info:
  title: Git2BeFit
  description: ''
  version: 1.0.0
servers:
  - url: 'https://77.55.236.227:8443'
tags:
  - name: user
    description: Operacje na użytkowniku
  - name: equipment-type
    description: Kategorie sprzętów
  - name: equipment
    description: Operacje na sprzętach
paths:
  /user/login/facebook:
    post:
      tags:
        - user
      summary: Logowanie przez FB
      description: ''
      operationId: loginWithFacebook
      requestBody:
        description: 'Należy przesłać do serwera aplikacji token udostępniony przez Facebook'
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/APIAuthModel'
        required: true
      responses:
        '200':
          description: Logowanie przy użyciu facebooka powiodło się
          headers:
            Authorization:
              description: JWT token dostępu do API serwera
              schema:
                type: string
            email:
              description: email z tokena FACEBOOK
              schema:
                type: string
            idUser: 
              description: ID użytkownika 
              schema:
                type: integer
        '400':
          description: Token nie przeszedł walidacji Facebooka
          headers:
            Cause:
              description: infomacja "user not found"
              schema:
                type: string
  /user/login/google:
    post:
      tags:
        - user
      summary: Logowanie przez Google
      description: ''
      operationId: loginWithGoogle
      requestBody:
        description: 'Należy przesłać do serwera aplikacji token udostępniony przez Google'
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/APIAuthModel'
        required: true
      responses:
        '200':
          description: ''
          headers:
            Authorization:
              description: JWT token dostępu do API serwera
              schema:
                type: string
        '400':
          description: |
            Logowanie nie powiodło się. Zawiera odpowiedni opis w zależności od błędu
            
            [user not found] - weryfikacja nie zwróciła użytkownika
            
            [token verification failed] - token nie przeszedł weryfikacji
            
            [parsing failed] - parsowanie przesłanego pliku JSON nie powiodło się
          headers:
            Cause:
              description: 'w zależności od błędu [...]'
              schema:
                type: string
  /user/signup:
    post:
      tags:
        - user
      summary: Rejsestracja
      description: ''
      operationId: signup
      requestBody:
        description: >-
          Hasło - wymagane conajmniej jedna( duża, mała litera, cyfra, znak
          specjalny) min. 8 znaków
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UserAuthModel'
        required: true
      responses:
        '201':
          description: 'Utworzono pomyślnie'
          headers:
            Location:
              description: 'Adres URL nowo stworzonego usera'
              schema:
                type: string
        '409':
          description: |
            Nie udało się stworzyć konta z któregoś z poniższych powodów
          
            [weak password] - hasło nie pasuje do wyrażenia,

            [bad email] - email nie ma struktury maila, 

            [duplicate entry] - podany email istnieje w bazie
          headers:
            Cause:
              description: 'W zależności od błędu wartość z [...]'
              schema:
                type: string
        '500':
          description: 'Nieokreślony błąd serwera'
          headers:
              Cause:
                description: '[unexpected error]'
                schema:
                  type: string
        '503':
          description: 'Błąd wysyłania emaila'
          headers:
              Cause:
                description: '[email sending]'
                schema:
                  type: string
  /user/login:
    post:
      tags:
        - user
      summary: Logowanie przez aplikację
      description: ''
      operationId: login
      requestBody:
        description: >-
          Hasło - wymagane conajmniej jedna( duża, mała litera, cyfra, znak
          specjalny) min. 8 znaków
        content:
          '':
            schema:
              $ref: '#/components/schemas/UserAuthModel'
        required: true
      responses:
        '200':
          description: Znaleziono
          headers:
            Authorization:
              description: JWT token dostępu do API serwera
              schema:
                type: string
        '403':
          description: 'Nie udane logowanie'
  /user/{id}:
    get:
      tags:
        - user
      summary: Pobieranie użytkownika przez ID
      description: ''
      operationId: getUser
      parameters:
      - name: "Authorization"
        description: "JWT token "
        in: header
        required: true
        schema: 
          type: string
      - name: id
        in: path
        description: "ID użytkownika którego informacje chcemy pobrać"
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Znaleziono
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: 'Nie znaleziono użytkownika o takim email'
          headers:
            Cause:
              description: '[user not found]'
              schema:
                type: string
    delete:
      tags:
        - user
      summary: Pobieranie użytkownika przez ID
      description: ''
      operationId: deleteUser
      parameters:
      - name: "Authorization"
        description: "JWT token "
        in: header
        required: true
        schema: 
          type: string
      - name: id
        in: path
        description: "ID użytkownika którego chcemy usunąć"
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: 'Usunięto'
        '404':
          description: 'Nie znaleziono użytkownika o takim id'
          headers:
            Cause:
              description: '[user not found]'
              schema:
                type: string
  /user/search/{email}:
    get:
      tags:
        - user
      summary: Pobieranie id uzytkownika przy uzyciu maila
      description: ''
      operationId: getUserInfo
      parameters:
      - name: "Authorization"
        description: "JWT token "
        in: header
        required: true
        schema: 
          type: string
      - name: email
        in: path
        description: "email użytkownika którego informacje chcemy pobrać"
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Znaleziono
          headers:
            idUser:
              description: id usera o podanym emailu
              schema:
                type: string
        '404':
          description: 'Nie znaleziono użytkownika o takim emailu'
          headers:
            Cause:
              description: '[user not found]'
              schema:
                type: string
  /user/{id}/password-update:
    put:
      tags:
        - user
      summary: Zmiana hasła użytkownika o podanym ID
      description: ''
      operationId: passwordUpdate
      requestBody:
        description: |
          actualPassword - hasło które posiada użytkownik
          
          newPassword - nowe hasło
        content:
          '':
            schema:
              $ref: '#/components/schemas/PasswordUpdateForm'
        required: true
      parameters:
      - name: "Authorization"
        description: "JWT token "
        in: header
        required: true
        schema: 
          type: string
      - name: id
        in: path
        description: "ID użytkownika którego informacje chcemy pobrać"
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: OK
        '404':
          description: 'Nie znaleziono użytkownika o takim id'
          headers:
            Cause:
              description: '[user not found]'
              schema:
                type: string
        '409':
          description: |
            [new password weak] - hasło nie pasuje do wyrażenia,

            [bad password] - złe hasło użytkownika
          headers:
            Cause:
              description: 'W zależności od błędu wartość z [...]'
              schema:
                type: string
  /user/remind-password:
    post:
      tags:
        - user
      summary: Wysłanie nowego hasła na email
      description: ''
      operationId: remindPassword
      parameters:
      - name: email
        in: query
        description: "email użytkownika dla którego wyślemy nowe hasło"
        required: true
        schema:
          type: string
      responses:
        '200':
          description: 'wysłano maila'
        '404':
          description: 'nie ma takiego maila w bazie'
          headers:
            Cause:
              description: '[user not found]'
              schema:
                type: string
        '409':
          description: 'nie udało sie zrobic update w bazie'
          headers:
            Cause:
              description: '[save error]'
              schema:
                type: string
        '503':
          description: 'błąd w wysyłaniu maila'
          headers:
            Cause:
              description: '[email sending]'
              schema:
                type: string
  /user/{id}/email-update: 
    put:
      tags:
        - user
      summary: Zmiana emaila użytkownika o podanym ID
      description: ''
      operationId: emailUpdate
      requestBody:
        description: |
          email - nowy email
          
          password - hasło użytkownika
        content:
          '':
            schema:
              $ref: '#/components/schemas/UserAuthModel'
        required: true
      parameters:
      - name: "Authorization"
        description: "JWT token "
        in: header
        required: true
        schema: 
          type: string
      - name: id
        in: path
        description: "ID użytkownika którego email chcemy zmienić"
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: 'Zmieniono email, ustawiono w bazie, że user nie jest aktywowany oraz wysłano maila z linkiem do weryfikacji'
        '404':
          description: 'Jeśli usera o danym id nie ma w bazie'
          headers:
            Cause:
              description: '[user not found]'
              schema:
                type: string
            
        '409':
          description: |
            Jeśli hasło jest nieprawidłowe lub podany email jest już w bazie
            
            [wrong password] - podane hasło nie jest zgodne z tym zapisanym w bazie
            
            [wrong email] - email nie przechodzi walidacji
            
            [duplicated email] - podany email jest już wykorzystywany
          headers:
            Cause:
              description: 'W zależności od błędu [...]'
              schema:
                type: string
        '503':
          description: 'Jeśli nie uda się wysłać emaila weryfikacyjnego'
          headers:
            Cause:
              description: '[email sending]'
              schema:
                type: string
  /user/token-verification:
    post:
      tags:
        - user
      summary: Pobieranie użytkownika przez ID
      description: ''
      operationId: tokenVerification
      parameters:
      - name: token
        in: header
        description: ""
        required: true
        schema:
          type: string
      responses:
        '200':
          description: "W nagłówku podany jest nowy token z nowym czasem wygaszania"
          headers:
            Authorization:
              description: 'Bearer tokenExample!@#!@#'
              schema:
                type: string
        '403':
          description: 'Token niepoprawny [token is not valid] lub jesli uzytkownika nie ma [user not found]'
          headers:
            Cause:
              description: 'W zależności od błędu [...]'
              schema:
                type: string
  
  /equipment-type:
    get:
      tags:
        - equipment-type
      summary: Pobieranie wszystkich kategorii sprzętów
      description: ''
      responses:
        '200':
          description: "Pobieranie się udało"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EquipmentTypeArray'
                
  /equipment:
    get:
      tags:
        - equipment
      summary: Pobieranie wszystkich kategorii sprzętów
      description: ''
      parameters:
      - name: "typeId"
        description: "Id kategorii, z której ćwiczenia mają zostać pobrane"
        in: query
        required: true
        schema: 
          type: integer
      responses:
        '200':
          description: "Pobieranie się udało"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EquipmentArray'
        '400':
          description: 'Jeżeli typeId nie zostanie podany lub nie zostanie w ogóle zawarty'
        
    
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        password:
          type: string
    APIAuthModel:
      type: object
      properties:
        idToken:
          type: string
      xml:
        name: APIAuthModel
    UserAuthModel:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      xml:
        name: User
    PasswordUpdateForm:
      type: object
      properties:
        email:
          type: string
        actualPassword:
          type: string
        newPassword:
          type: string
      xml:
        name: PasswordUpdateForm
    Excersise:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        descriptionOfCorrectExecution:
          type: string
        excersiseForm:
          type: string
          example: TIME
        videoUrl:
          type: string
        photoUrl:
          type: string
        trainingType:
          type: string
          example: CARDIO
        bodyPortions:
          type: array
          items:
            $ref: "#/components/schemas/BodyPortion"
          example: [CHEST, SIXPACK, BICEPS, TRICEPS]
    Equipment:
      type: object
      properties:
        id:
          type: integer
        equipmentType:
          type: object
          $ref: "#/components/schemas/EquipmentType"
        name:
          type: string
        description:
          type: string
        url:
          type: string
    EquipmentArray:
      type: array
      items:
        $ref: "#/components/schemas/Equipment"
    EquipmentType:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        url:
          type: string
    EquipmentTypeArray:
      type: array
      items:
        $ref: "#/components/schemas/EquipmentType"
    TrainingType:
      type: string
      enum:
        - STRENGTH 
        - CARDIO
        - FITNESS
    TrainingSubType:
      type: string
      enum:
        - SPLIT
        - FULL_BODY_WORKOUT
        - SERIES
        - CIRCUIT
    BodyPortion:
      type: string
      enum:
        - CHEST
        - SIXPACK
        - BACK 
        - VERTICAL_BACK
        - HORIZONTAL_BACK
        - LEGS
        - THIGHS 
        - CALFS
        - BUTTOCKS
        - ARMS
        - BICEPS 
        - TRICEPS
        - SHOULDERS
    ExcersiseForm:
      type: string
      enum:
        - TIME
        - REPEAT
    GenerateWorkoutForm:
      type: object
      properties:
        trainingType:
          type: string
          $ref: "#/components/schemas/TrainingType"
        trainingSubType:
          type: string
          $ref: "#/components/schemas/TrainingSubType"
        equipmentIDs:
          type: array
          items:
            type: integer
        bodyPortions:
          type: array
          items:
            $ref: "#/components/schemas/BodyPortion"
        duration:
          type: integer
          example: "60 min"
        intensity:
          example: "1-3"
          type: integer

